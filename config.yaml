bind: 0.0.0.0:9090
wait_queue_len: 100
max_conn: 50000
timeout: 5
stats: 0.0.0.0:19090
backend:
  - 127.0.0.1:83
  - 127.0.0.1:84
heatch:
  interval: 3000 # 向后端发送的健康检查包的间隔 单位毫秒
  rise: 2 #如果连续成功次数达到rise_count，服务器就被认为是up
  fall: 5 #如果连续失败次数达到fall_count，服务器就被认为是down
  timeout: 1000 #后端健康请求的超时时间，单位毫秒
  type: tcp #健康检查包的类型
  # tcp：简单的tcp连接，如果连接成功，就说明后端正常。
  # http：发送HTTP请求，通过后端的回复包的状态来判断后端是否存活。
  # port: 指定后端服务器的检查端口。你可以指定不同于真实服务的后端服务器的端口，
  # 比如后端提供的是443端口的应用，你可以去检查80端口的状态来判断后端健康状况。默认是0，表示跟后端server提供真实服务的端口一样。

  default_down: true # 设定初始时服务器的状态，
  # 如果是true，就说明默认是down的，如果是false，就是up的。
  # 默认值是true，也就是一开始服务器认为是不可用，要等健康检查包达到一定成功次数以后才会被认为是健康的。
  check_http_send: "HEAD / HTTP/1.1\r\n\r\n"
  check_http_expect_alive:
    - http_2xx
    - http_3xx
  port: 8080

log:
  level: 0
  path: "./logs/tcpProxy.log"
  max_size: 10
  max_backup: 10
  max_age: 7
  compress: true
  servicename: tcpProxy
